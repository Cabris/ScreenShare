package com.myapp.h264streamingviwer;

import com.simpleMessage.sender.MessageSender;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

public class SensorClient extends Thread implements SensorEventListener {
	private SensorManager sManager;
	// private Sensor mSensor;
	// TextView qTextView;
	MessageSender sender;

	public SensorClient(Context context, MessageSender sender) {
		this.sender = sender;
		sManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
		sManager.registerListener(this, sManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE),
				SensorManager.SENSOR_DELAY_GAME);
		// qTextView = (TextView) ((Activity) context).findViewById(R.id.q_textView);
	}

	private final static double EPSILON = 0.00001;
	private static final float NS2S = 1.0f / 1000000000.0f;
	private final float[] deltaRotationVector = new float[4];
	private float timestamp;

	@Override
	public void onSensorChanged(SensorEvent event) {
		// This timestep's delta rotation to be multiplied by the current rotation
		// after computing it from the gyro sample data.
		if (timestamp != 0) {
			final float dT = (event.timestamp - timestamp) * NS2S;
			// Axis of the rotation sample, not normalized yet.
			float axisX = event.values[0];
			float axisY = event.values[1];
			float axisZ = event.values[2];

			// Calculate the angular speed of the sample
			float omegaMagnitude = (float) Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);

			// Normalize the rotation vector if it's big enough to get the axis
			if (omegaMagnitude > EPSILON) {
				axisX /= omegaMagnitude;
				axisY /= omegaMagnitude;
				axisZ /= omegaMagnitude;
			}

			// Integrate around this axis with the angular speed by the timestep
			// in order to get a delta rotation from this sample over the timestep
			// We will convert this axis-angle representation of the delta rotation
			// into a quaternion before turning it into the rotation matrix.
			float thetaOverTwo = omegaMagnitude * dT / 2.0f;
			float sinThetaOverTwo = (float) Math.sin(thetaOverTwo);
			float cosThetaOverTwo = (float) Math.cos(thetaOverTwo);
			deltaRotationVector[0] = sinThetaOverTwo * axisX;
			deltaRotationVector[1] = sinThetaOverTwo * axisY;
			deltaRotationVector[2] = sinThetaOverTwo * axisZ;
			deltaRotationVector[3] = cosThetaOverTwo;
		}
		timestamp = event.timestamp;

		float[] deltaQuaternion = new float[4];
		SensorManager.getQuaternionFromVector(deltaQuaternion, deltaRotationVector);

		updateQuaternion(deltaQuaternion[1], deltaQuaternion[2], deltaQuaternion[3], deltaQuaternion[0]);

		float[] deltaRotationMatrix = new float[9];
		SensorManager.getRotationMatrixFromVector(deltaRotationMatrix, deltaRotationVector);
		// User code should concatenate the delta rotation we computed with the current rotation
		// in order to get the updated rotation.
		// rotationCurrent = rotationCurrent * deltaRotationMatrix;
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
	}

	private void updateQuaternion(float x, float y, float z, float w) {
		// Log.d("SensorClient", "heading: "+heading+",pitch: "+pitch+",roll: "+roll);
		String data = x + "," + y + "," + z + "," + w;
		// qTextView.setText("w: " + w + "," + "x: " + x + "," + "y: " + y + "," + "z: " + z);
		sender.getQueue().add(data);
	}

	public void onDestroy() {
		sManager.unregisterListener(this);
	}

}
