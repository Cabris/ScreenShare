package com.myapp.h264streamingviwer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.*;
import java.nio.ByteBuffer;

import android.R.integer;
import android.R.string;
import android.util.Log;
import com.comman.*;

public class StreamReceiver {
	
	Socket clientSocket;
	String ipAddress;
	int port;
	BufferedReader inFromServer;
	InputStream inputStream;
	SubThread subThread;
	ReceiveThread receiveThread;
	
	public StreamReceiver(String ip,int port) {
		this.ipAddress=ip;
		this.port=port;
		subThread=new SubThread();
	}
	
	public void Connect() {
		subThread.start();
	}
	
	
	
	public void onDestory() {
		receiveThread.interrupt();
	}
	
	private class SubThread extends Thread{
		@Override
		public void run() {
			super.run();
			try {
				clientSocket = new Socket(ipAddress, port);
				inputStream=clientSocket.getInputStream();
				inFromServer = new BufferedReader(new InputStreamReader(inputStream)); 
				StartReceive();
				} 
			catch (Exception e) {
				e.printStackTrace();
			}
		}
		private void StartReceive() {
			receiveThread=new ReceiveThread();
			receiveThread.start();
		}
	}
	
	private class ReceiveThread extends Thread {
		ByteBuffer byteBuffer=ByteBuffer.allocate(60000);
		int targetLength=-1;
		int currentLength=0;
		@Override
		public void run() {
			super.run();
			long total=0;
			while (!Thread.interrupted()) {
				byte[] buffer=new byte[60000];
				try {
					int bytesRead=0;
					//bytesRead=inputStream.read(buffer);
					if(targetLength<0){//need to update the length
						byte[] lengthData=new byte[4];
						bytesRead=inputStream.read(lengthData);
						targetLength=BitConverter.toInt32(lengthData, 0);
					}else {//fill in the buffer
						
						
					}
					
					
					
//					Log.d("DecodeActivity receive", "s: "+bytesRead);
//					
//					String mString=inFromServer.readLine();
//					if(mString!=null)
//						Log.d("DecodeActivity receive", "mString: "+mString);
//					if(bytesRead>0){
//						Log.d("DecodeActivity receive", "s>0");
//						total+=bytesRead;	
//					}
//					else {
//						Log.d("DecodeActivity receive", "interrupted, total: "+total);
//						Thread.interrupted();
//						break;
//					}
						
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public String getIpAddress() {
		return ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

}
